import meta.statics.*;
import values.*;
import sequences.*;
import show.*;


define Vec['T, 'n] as RecordType(ar:Array['T, 'n]);
alias Vec3['T] = Vec['T, 3];
alias Vec3f = Vec[Float32, 3];

#fieldInDimension?('T, 'n) = false;
overload #fieldInDimension?("w", 'n) | 'n > 3 = true;
overload #fieldInDimension?("z", 'n) | 'n > 2 = true;
overload #fieldInDimension?("y", 'n) | 'n > 1 = true;
overload #fieldInDimension?("x", 'n) | 'n > 0 = true;

define fieldDimensionIndex;
overload fieldDimensionIndex(#'field) = assocValue(#'field, x:0, y:1, z:2, w:3);
overload #fieldDimensionIndex('field) = assocValue('field, x:0, y:1, z:2, w:3);

define mapString as RuntimeStaticProcedure();

overload #mapString('fn, 'field) =
  ..mapValues((#'f) -> 'fn(staticStringFromChars(#'f)),
    ..staticStringChars('field));

#swizzle?('field) = staticStringSize('field) > 1;

#canSwizzel?('field, 'n) =
  not inValues?(false, ..mapString((#'f) -> fieldInDimension?(#'f, 'n), 'field));

overload index(forward vec:Vec['T, 'n], #'field)
  --> returned:Vec['T, staticStringSize(#'field)]
  | swizzle?(#'field) and canSwizzel?(#'field, 'n)
{
  returned.ar <-- Array['T, staticStringSize(#'field)](
    ..mapValues((ind) -> vec[ind],
      ..mapString(fieldDimensionIndex, #'field)));
}

overload index(forward vec:Vec['T, 'n], #'field) inline
  | fieldInDimension?(#'field, 'n)
  = forward vec.ar[fieldDimensionIndex(#'field)];

overload index(vec:Vec['T, 'n], i:'I) inline 
  | ##Integer?('I)
  = vec.ar[i];

overload equals?(v1:Vec['T1, 'n1], v2:Vec['T2, 'n2]) inline
  = v1.ar == v2.ar;


main() {
  var vec3 = Vec[Float64, 3]();
  show(#swizzle?("xyz"));
  show(#canSwizzel?("zyx", 3));
  show("---");
  vec3.x = 1.0;
  vec3.y = 2.0;
  vec3.z = 3.0;

  var vec4 = vec3.zxyz;
  show(#type(-> vec4));

  show(vec4.x, vec4.y, vec4.z, vec4.w);

}

